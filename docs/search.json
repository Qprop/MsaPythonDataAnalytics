[
  {
    "objectID": "MsaPythonDataAnalytics.html#welcome",
    "href": "MsaPythonDataAnalytics.html#welcome",
    "title": "Data Analytics Introduction Using Python Training",
    "section": "Welcome",
    "text": "Welcome\nWe are embarking on a journey, with multiple stops but the destination will be far out. The stops will be areas of expertise and learning that we will have done and practiced but the destination is the progressive accumulation of the learning.\nWith the ever evolving changing of technology the destination will always be changing."
  },
  {
    "objectID": "MsaPythonDataAnalytics.html#data-analytics",
    "href": "MsaPythonDataAnalytics.html#data-analytics",
    "title": "Data Analytics Introduction Using Python Training",
    "section": "Data Analytics",
    "text": "Data Analytics\nColloquial term data analytics can be coined as both a science and an art. With the science part majorly following statistical/mathematical procedures used, art comes from the different ways and methods someone can use to present and execute the since part of it.\nTools for Data Analytics\nThere are various tools/Software/applications can be used for data analysis\n\n\n\nPaid for:\n\nMs Excel\nMs Power BI\nSPSS\nSTATA\nSAS\nMS SQL\n\n\n\n\nOpen Source: Free\n\nPython\nR\nPostgres\nJulia\nMangoDB\nCouchDB"
  },
  {
    "objectID": "MsaPythonDataAnalytics.html#python-introduction",
    "href": "MsaPythonDataAnalytics.html#python-introduction",
    "title": "Data Analytics Introduction Using Python Training",
    "section": "Python Introduction",
    "text": "Python Introduction\nOpen Source Programming language.First come to use in the early 1990’s and developed by Guido Van Rossum more information here.\n\n\nAdvantages\n\nEasy to learn\nAlmost language like syntax\nFast execution\nAll Purpose programming language:\n\nused for software development\nused for data analysis\nused for machine learning\nused for web development\n\n\n\nDisadvantages\n\nSome convections are different from other programming language\nHigh level interpreted language"
  },
  {
    "objectID": "MsaPythonDataAnalytics.html#python-interface",
    "href": "MsaPythonDataAnalytics.html#python-interface",
    "title": "Data Analytics Introduction Using Python Training",
    "section": "Python Interface",
    "text": "Python Interface\nPython programming language uses it’s in build command prompt frequently called CLI standing for Command Line Interface, search through windows/MAC program files and you should see Python 3.0.0) there are various versions of python and depending on which one you have installed this will determine the python CLI.\nThough you can be able to do everything using this, it doesn’t give an intuitive user interface hence the reason for development of IDE Integrated Development Environment.\nIDE is the dashboard similar to car dashboard but the actual software the engine is now python for this case.\n\nIDE’s Common to PythonInstallations\n\n\n\nPycharm\nSpyder\nvsCode\nRstudio\nPositron (New in Beta)\nText editors\n\nnotepad ++\nvim\nsublime\n\ne.t.c\n\nThough there are many and the tool of choice is open for use, for now we can focus on using vsCode as this is universal to also other programming languages but if you are interested in a polygot system you can test positron.\n\n\nLet us check what installations you have\n\nPython Installation\nIDE Installation\nTo install all this together we prefer anaconda\n\nAnaconda | full suit of packages and tools\nminiconda | minimal and necessary packages"
  },
  {
    "objectID": "MsaPythonDataAnalytics.html#python-hello-world",
    "href": "MsaPythonDataAnalytics.html#python-hello-world",
    "title": "Data Analytics Introduction Using Python Training",
    "section": "Python | Hello World",
    "text": "Python | Hello World\nPython being an interpreted high level programming language, making things easier for the programmer. Able to pick up the things very easily.\nLet us start with the first code.\n\nHello WorldKeywordsData typesMethods & FunctionsSummary Sheets\n\n\n\n\nCode\nprint(\"Hello WOrld\")\n\n\nHello WOrld\n\n\nLet us use it as a calculator.\n\n\nCode\n2 + 2  #Add\n#4\n3 - 1  #Subtract\n#2\n4 * 5  #Multiply\n#20\n20 / 5 #Divide\n#4 \n5 ** 2 #Exponent\n#25\n5 % 2  #?What is the result\n\n\nUsing it as an input\n\n\nCode\ninput(\"What's your name\")\n\n\nUsing comments\n\n\nCode\n#This is a comment\n\n\n\n\npython has keywords this are words that have syntactical use in the program below list even though not fully conclusive.\nand continue except global lambda raise yield\nas def exec if not return\nassert del finally import or try\nbreak elif for in pass while\nclass else from is print with\n\n\nNumbers Integer Numbers\nStrings\nsequence of characters used to store and represent text-based information\n\n\nCode\nfirst_string = \"My first String\"\nfirst_string\n\n\n'My first String'\n\n\n\n\nCode\nlong_string = \"\"\"Very long string\nspanning multiple lines\nthat never seem to come to an end\"\"\"\nlong_string\n\n\nList\nMutable ordered sequence of items.\n\n\nCode\nfirst_list = [1,2,3,4,1,1,1,1]\nfirst_list\n\n\n[1, 2, 3, 4, 1, 1, 1, 1]\n\n\nList objects provide several methods\n\n\nCode\nfirst_list.count(1)\nfirst_list.index(1)\nfirst_list.append(5)\nfirst_list.remove(5)\nfirst_list.pop(-1)\nfirst_list.reverse()\nfirst_list.sort()\n\n\nTuples\nImmutable ordered sequence of items.\n\n\nCode\nfirst_tuple = (1,2,3)\nfirst_tuple\n\n\n(1, 2, 3)\n\n\nSets\nOrdered collections of unique items.\n\n\nCode\n{42, 3.14, 'hello'} # Literal for a set with three items\n{100} # Literal for a set with one item\nset() # Empty set (can't use {}—empty dict!)\n\n\nset()\n\n\nDictionary\nArbitrary collection of objects indexed by nearly arbitrary values called keys.\n\n\nCode\nfirst_dic = {'a' : [1,2,3], 'b' : [4,5,6], 'c' : [7,6,8]}\nfirst_dic\n\n\n{'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 6, 8]}\n\n\n\n\nCode\n{'x':42, 'y':3.14, 'z':7} # Dictionary with three items, str keys\n{1:2, 3:4} # Dictionary with two items, int keys\n{1:'za', 'br':23} # Dictionary with mixed key types\n{} # Empty dictionary\n\n\ndict(x=42, y=3.14, z=7) # Dictionary with three items, str keys\ndict([(1, 2), (3, 4)]) # Dictionary with two items, int keys\ndict([(1,'za'), ('br',23)]) # Dictionary with mixed key types\ndict() # Empty dictionary\n\n\n\n\nMethods\nMethod: Attributes associated to different objects and data types. As well classes at a broader level\n\n\nCode\nfirst_string.upper()\nfirst_string.lower()\nfirst_string.swapcase()\nfirst_string.rsplit() #separating or delimiter is a space\n\n\n['My', 'first', 'String']\n\n\nFunctions\n\n\nCode\nfirst_list = [1,2,3,4]\nfirst_list\n\n\n[1, 2, 3, 4]\n\n\n\n\nassociativity of the operator: L (left-to-right), R (right-to-left), or NA (nonassociative).\n\n\n\n\n\n\n\n\nOperator\nDescription\nAssociativity\n\n\n\n\n{key:expr,...}\nDictionary creation\nNA\n\n\n{ expr ,...}\nSet creation\nNA\n\n\n[ expr ,...]\nList creation\nNA\n\n\n( expr ,...)\nTuple creation or just parentheses\nNA\n\n\nf ( expr ,...)\nFunction call\nL\n\n\nx [ index : index ]\nSlicing\nL\n\n\nx [ index ]\nIndexing\nL\n\n\nx . attr\nAttribute reference\nL\n\n\nx ** y\nExponentiation (x to the yth power)\nR\n\n\n~ x\nBitwise NOT\nNA\n\n\n+x, -x\nUnary plus and minus\nNA\n\n\nx*y, x/y, x//y, x%y\nMultiplication, division, truncating division,remainder\nL\n\n\nx+y, x-y\nAddition, subtraction\nL\n\n\nx&lt;&lt;y, x&gt;&gt;y\nLeft-shift, right-shift\nL\n\n\nx & y\nBitwise AND\nL\n\n\nx ^ y\nBitwise XOR\nL\n\n\nx | y\nBitwise OR\nL\n\n\nx&lt;y, x&lt;=y, x&gt;y, x&gt;=y, x&lt;&gt;y (v2 only),x!=y, x==y\nComparisons (less than, less than or equal, greater than, greater than or equal, inequality, equality)a\nNA\n\n\nx is y, x is not y\nIdentity tests\nNA\n\n\nx in y, x not in y\nMembership tests\nNA\n\n\nnot x\nBoolean NOT\nNA\n\n\nx and y\nBoolean AND\nL\n\n\nx or y\nBoolean OR\nL\n\n\nx if expr else y\nTernary operator\nNA\n\n\nlambda arg,...: expr\nAnonymous simple function\nNA"
  },
  {
    "objectID": "MsaPythonDataAnalytics.html#python-modules",
    "href": "MsaPythonDataAnalytics.html#python-modules",
    "title": "Data Analytics Introduction Using Python Training",
    "section": "Python modules",
    "text": "Python modules"
  },
  {
    "objectID": "MsaPythonDataAnalytics.html#python-numpy-introduction",
    "href": "MsaPythonDataAnalytics.html#python-numpy-introduction",
    "title": "Data Analytics Introduction Using Python Training",
    "section": "Python numpy | Introduction",
    "text": "Python numpy | Introduction\nnumpy: python module/library specialized in Arrays and Vectorized Computation.\nNumPy, short for Numerical Python, is one of the most important foundational packages for numerical computing in Python. Numpy works with array from 1-n dimensional.\n\n\nCode\nimport numpy as np\n\nmy_arr = np.arange(10)\n\n#my_list = list(range(10)) #inbuilt python\n\nmy_arr\n\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\nMultidimensional Array\n\n\nCode\ndata = np.array([[1.5, -0.1, 3], [0, -3, 6.5]])\n\ndata\n\n\narray([[ 1.5, -0.1,  3. ],\n       [ 0. , -3. ,  6.5]])\n\n\nArray descriptors\n\n\nCode\ndata.shape\ndata.dtype\ndata.ndim\n\n\n2"
  },
  {
    "objectID": "MsaPythonDataAnalytics.html#python-pandas-introduction",
    "href": "MsaPythonDataAnalytics.html#python-pandas-introduction",
    "title": "Data Analytics Introduction Using Python Training",
    "section": "Python Pandas | Introduction",
    "text": "Python Pandas | Introduction\nPandas : Python module/library enhancing data manipulation tools designed to make data cleaning and analysis fast and convenient in Python. Works intandem with numpy and is the core working under the hood.\n\n\nCode\nimport pandas as pd\n\nobj_series = pd.Series([4, 7, -5, 3])\n\nobj_series\n\n\n0    4\n1    7\n2   -5\n3    3\ndtype: int64\n\n\nMain difference of pandas with numpy is that it has indexed values and designed for working with tabular or heterogeneous data."
  },
  {
    "objectID": "MsaPythonDataAnalytics.html#python-visualization-matplotlip-seaborn",
    "href": "MsaPythonDataAnalytics.html#python-visualization-matplotlip-seaborn",
    "title": "Data Analytics Introduction Using Python Training",
    "section": "Python Visualization | Matplotlip & Seaborn",
    "text": "Python Visualization | Matplotlip & Seaborn"
  },
  {
    "objectID": "MsaPythonDataAnalytics.html#folder-structure-file-management",
    "href": "MsaPythonDataAnalytics.html#folder-structure-file-management",
    "title": "Data Analytics Introduction Using Python Training",
    "section": "Folder Structure & File Management",
    "text": "Folder Structure & File Management"
  },
  {
    "objectID": "MsaPythonDataAnalytics.html#sql-introduction",
    "href": "MsaPythonDataAnalytics.html#sql-introduction",
    "title": "Data Analytics Introduction Using Python Training",
    "section": "SQL Introduction",
    "text": "SQL Introduction"
  }
]