---
title: "Data Analytics Introduction Using Python Training"
jupyter: python3
format: 
  revealjs:
    theme: serif
    smaller: true
    scrollable: true
    incremental: true
    transition: zoom
    background-transition: fade
code-fold: true
---

# Introduction

## Welcome

We are embarking on a journey, with multiple stops but the destination will be far out. The stops will be areas of expertise and learning that we will have done and practiced but the destination is the progressive accumulation of the learning.

With the ever evolving changing of technology the destination will always be changing.

------------------------------------------------------------------------

::: {.columns}

::: {.column width="60%"}
### Assumptions {.smaller}

Have some limited or little knowledge of Microsoft excel functions e.g `=sum(C1,C2)`, though not mandatory it makes it easier to grasp concepts slightly faster. Though if you remember the simple mathematics we do everyday of summing and adding money then you are good :).
:::

::: {.column width="40%"}
### Requirements {.smaller}

-   *Interest* and *Desire* to learn
-   Working Computer (Laptop/Desktop)
-   Access to internet once in a while to download a few resource materials
:::
:::



------------------------------------------------------------------------



::: {.columns}

::: {.column width="40%"}
### Teaching guide

-   Mixed instructional guide, with the presentation but focused on getting more hard skills

-   Engagements and practice on the fly
:::

::: {.column width="60%"}
### About

Just me but you can see you can get the details from [qprop](https://www.qprop.me/about/)

Will be getting assisted by Alex.
:::
:::

## Data Analytics {.smaller}

Colloquial term ***data analytics*** can be coined as both a science and an art. With the ***science*** part majorly following statistical/mathematical procedures used, *art* comes from the different ways and methods someone can use to present and execute the since part of it.




### Tools for Data Analytics

There are various tools/Software/applications can be used for data analysis


::: {.columns}

::: {.column width="50%"}
- Paid for: 
  - Ms Excel
  - Ms Power BI
  - SPSS
  - STATA
  - SAS
  - MS SQL
  
:::
::: {.column width="50%"}

  
- Open Source: **Free**
  - ***Python***
  - R
  - Postgres
  - Julia
  - MangoDB
  - CouchDB
  
:::
:::


# Python {.smaller}

## Python Introduction  

Open Source Programming language.First come to use in the early 1990's and developed by **Guido Van Rossum** more information [here](https://en.wikipedia.org/wiki/Python_(programming_language)).


::: {.columns}

::: {.column width="50%"}

### Advantages

- Easy to learn
- Almost language like syntax
- Fast execution
- All Purpose programming language:
  - used for software development
  - used for data analysis
  - used for machine learning
  - used for web development

:::

::: {.column width="50%"}

### Disadvantages

- Some convections are different from other programming language
- High level interpreted language

:::
:::



## Python Interface {.smaller}

Python programming language uses it's in build command prompt frequently called *CLI* standing for *Command Line Interface*, search through windows/MAC program files and you should see *Python 3.0.0)* there are various versions of python and depending on which one you have installed this will determine the python CLI.

Though you can be able to do everything using this, it doesn't give an intuitive user interface hence the reason for development of *IDE* Integrated Development Environment. 

*IDE* is the dashboard similar to car dashboard but the actual software the engine is now *python* for this case.

::: {.panel-tabset}

### IDE's Common to Python

- Pycharm
- Spyder
- vsCode
- Rstudio
- Positron (*New in Beta*)
- Text editors
  - notepad ++
  - vim
  - sublime
- e.t.c


Though there are many and the tool of choice is open for use, for now we can focus on using vsCode as this is universal to also other programming languages but if you are interested in a polygot system you can test positron.

### Installations

***Let us check what installations you have***

- Python Installation
- IDE Installation
- To install all this together we prefer [anaconda](www.anaconda.com)
  - Anaconda | **full suit of packages and tools**
  - miniconda | **minimal and necessary packages**

:::


## Python | Hello World

Python being an interpreted high level programming language, making things easier for the programmer. Able to pick up the things very easily.

Let us start with the first code.

::: {.panel-tabset}

### Hello World

```{python}
#| echo: True

print("Hello WOrld")


```

Let us use it as a calculator.

```{python}
#| echo: true
#| eval: false
#| code-line-numbers: "|1|3|5|7"

2 + 2  #Add
#4
3 - 1  #Subtract
#2
4 * 5  #Multiply
#20
20 / 5 #Divide
#4 
5 ** 2 #Exponent
#25
5 % 2  #?What is the result

```


Using it as an ***input***

```{python}
#| echo: true
#| eval: false

input("What's your name")

```

Using ***comments***

```{python}
#| echo: true

#This is a comment

```

### Keywords

**python** has *keywords* this are words that have syntactical use in the program below list even though not fully conclusive.

`and`   `continue`    `except`    `global`    `lambda`    `raise`   `yield`

`as`    `def`   `exec`    `if`    `not`   `return`

`assert`    `del`   `finally`   `import`    `or`    `try`

`break`   `elif`    `for`   `in`    `pass`    `while`

`class`   `else`    `from`    `is`    `print`   `with`


### Data types

**Numbers**
**Integer Numbers**


**Strings**

sequence of characters used to store and represent text-based information

```{python}
#| echo: true
first_string = "My first String"
first_string
```

```{python}
#| echo: true
#| eval: false
long_string = """Very long string
spanning multiple lines
that never seem to come to an end"""
long_string
```


***List***

Mutable ordered sequence of items.

```{python}
#| echo: true
first_list = [1,2,3,4,1,1,1,1]
first_list
```

List objects provide several methods

```{python}
#| echo: true
#| eval: false
first_list.count(1)
first_list.index(1)
first_list.append(5)
first_list.remove(5)
first_list.pop(-1)
first_list.reverse()
first_list.sort()
```



***Tuples***

Immutable ordered sequence of items.

```{python}
#| echo: true
first_tuple = (1,2,3)
first_tuple
```

***Sets***

Ordered collections of unique items.

```{python}
#| echo: true
#| #| eval: false
{42, 3.14, 'hello'} # Literal for a set with three items
{100} # Literal for a set with one item
set() # Empty set (can't use {}â€”empty dict!)
```


***Dictionary***

Arbitrary collection of objects indexed by nearly arbitrary values called keys.

```{python}
#| echo: true
first_dic = {'a' : [1,2,3], 'b' : [4,5,6], 'c' : [7,6,8]}
first_dic
```

```{python}
#| echo: true
#| eval: false

{'x':42, 'y':3.14, 'z':7} # Dictionary with three items, str keys
{1:2, 3:4} # Dictionary with two items, int keys
{1:'za', 'br':23} # Dictionary with mixed key types
{} # Empty dictionary


dict(x=42, y=3.14, z=7) # Dictionary with three items, str keys
dict([(1, 2), (3, 4)]) # Dictionary with two items, int keys
dict([(1,'za'), ('br',23)]) # Dictionary with mixed key types
dict() # Empty dictionary
```


### Methods & Functions

**Methods**

Method: Attributes associated to different objects and data types. As well classes at a broader level

```{python}
#| echo: true
first_string.upper()
first_string.lower()
first_string.swapcase()
first_string.rsplit() #separating or delimiter is a space

```

***Functions***

```{python}
#| echo: true
first_list = [1,2,3,4]
first_list
```


### Summary Sheets

**associativity** of the operator: L (left-to-right), R (right-to-left), or NA (nonassociative).

|**Operator**|**Description**|**Associativity**|
|----|-----|------|
|`{key:expr,...}`   |Dictionary creation| NA|
|`{ expr ,...}`     |Set creation       | NA|
|`[ expr ,...]`     |List creation      | NA|
|`( expr ,...)`     |Tuple creation or just parentheses      | NA|
|`f ( expr ,...)`     |Function call      | L|
|`x [ index : index ]`     |Slicing      | L|
|`x [ index ]`     |Indexing      | L|
|`x . attr`     |Attribute reference      | L|
|`x ** y`     |Exponentiation (x to the yth power)      | R|
|`~ x`     |Bitwise NOT      | NA|
|`+x, -x`     |Unary plus and minus      | NA|
|`x*y, x/y, x//y, x%y`     |Multiplication, division, truncating division,remainder      | L|
|`x+y, x-y` | Addition, subtraction | L |
|`x<<y, x>>y` | Left-shift, right-shift | L |
|`x & y` | Bitwise AND | L |
|`x ^ y` | Bitwise XOR | L |
|`x | y` | Bitwise OR | L |
|`x<y, x<=y, x>y, x>=y, x<>y (v2 only),x!=y, x==y` | Comparisons (less than, less than or equal, greater than, greater than or equal, inequality, equality)a | NA |
|`x is y, x is not y` | Identity tests | NA |
|`x in y, x not in y` | Membership tests | NA |
|`not x` | Boolean NOT | NA | 
|`x and y` | Boolean AND | L | 
|`x or y` | Boolean OR | L | 
|`x if expr else y` | Ternary operator | NA |
|`lambda arg,...: expr` | Anonymous simple function | NA |

:::


## Python modules


## Python numpy | Introduction {.smaller}

***numpy***: python module/library specialized in *Arrays and Vectorized Computation*.

NumPy, short for Numerical Python, is one of the most important foundational packages for numerical computing in Python. Numpy works with array from 1-n dimensional.

```{python}

#| echo: true

import numpy as np

my_arr = np.arange(10)

#my_list = list(range(10)) #inbuilt python

my_arr
```

Multidimensional Array

```{python}
#| echo: true

data = np.array([[1.5, -0.1, 3], [0, -3, 6.5]])

data

```

Array descriptors

```{python}
#| echo: true

data.shape
data.dtype
data.ndim

```


## Python Pandas | Introduction

***Pandas*** : Python module/library enhancing data manipulation tools designed to make data cleaning and analysis fast and convenient in Python. Works intandem with *numpy* and is the core working under the hood.

```{python}
#| echo: true

import pandas as pd

obj_series = pd.Series([4, 7, -5, 3])

obj_series

```

Main difference of pandas with numpy is that it has indexed values and designed for working with tabular or heterogeneous data.

## Python Visualization | Matplotlip & Seaborn

## Folder Structure & File Management



# SQL

## SQL Introduction  {.smaller}