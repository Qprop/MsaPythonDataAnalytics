---
title: "Data Analytics Introduction Using Python Training"
jupyter: python3
format: 
  revealjs:
    theme: serif
    smaller: true
    scrollable: true
    incremental: false
    transition: concave
    background-transition: fade
    controls: true
    code-fold: true
    code-tools: true

---

# Introduction

## Welcome

We are embarking on a journey, with multiple stops but the destination will be far out. The stops will be areas of expertise and learning that we will have done and practiced but the destination is the progressive accumulation of the learning.

With the ever evolving changing of technology the destination will always be changing.

------------------------------------------------------------------------

::: {.columns}

::: {.column width="60%"}
### Assumptions {.smaller}

Have some limited or little knowledge of Microsoft excel functions e.g `=sum(C1,C2)`, though not mandatory it makes it easier to grasp concepts slightly faster. Though if you remember the simple mathematics we do everyday of summing and adding money then you are good :).
:::

::: {.column width="40%"}
### Requirements {.smaller}

-   *Interest* and *Desire* to learn
-   Working Computer (Laptop/Desktop)
-   Access to internet once in a while to download a few resource materials
:::
:::



------------------------------------------------------------------------



::: {.columns}

::: {.column width="40%"}
### Teaching guide

>   Mixed instructional guide, with the presentation but focused on getting more hard skills

>   Engagements and practice on the fly
:::

::: {.column width="60%"}
### About

Just me but you can see you can get the details from [qprop](https://www.qprop.me/about/)

Will be getting assisted by Alex.
:::
:::

## Data Analytics {.smaller}

Colloquial term ***data analytics*** can be coined as both a science and an art. With the ***science*** part majorly following statistical/mathematical procedures used, *art* comes from the different ways and methods someone can use to present and execute the since part of it.




### Tools for Data Analytics

There are various tools/Software/applications can be used for data analysis


::: {.columns}

::: {.column width="50%"}
- Paid for: 
  - Ms Excel
  - Ms Power BI
  - SPSS
  - STATA
  - SAS
  - MS SQL
  
:::
::: {.column width="50%"}

  
- Open Source: **Free**
  - ***Python***
  - R
  - Postgres
  - Julia
  - MangoDB
  - CouchDB
  
:::
:::


# Python {.smaller}

## Python Introduction  

Open Source Programming language.First come to use in the early 1990's and developed by **Guido Van Rossum** more information [here](https://en.wikipedia.org/wiki/Python_(programming_language)).


::: {.columns}

::: {.column width="50%"}

### Advantages

- Easy to learn
- Almost language like syntax
- Fast execution
- All Purpose programming language:
  - used for software development
  - used for data analysis
  - used for machine learning
  - used for web development

:::

::: {.column width="50%"}

### Disadvantages

- Some convections are different from other programming language
- High level interpreted language

:::
:::



## Python Interface {.smaller}

Python programming language uses it's in build command prompt frequently called *CLI* standing for *Command Line Interface*, search through windows/MAC program files and you should see *Python 3.0.0)* there are various versions of python and depending on which one you have installed this will determine the python CLI.

Though you can be able to do everything using this, it doesn't give an intuitive user interface hence the reason for development of *IDE* Integrated Development Environment. 

*IDE* is the dashboard similar to car dashboard but the actual software the engine is now *python* for this case.

::: {.panel-tabset}

### IDE's Common to Python

- Pycharm
- Spyder
- *jupyter*
- vsCode
- Rstudio
- Positron (*New in Beta*)
- Text editors
  - notepad ++
  - vim
  - sublime
- e.t.c


Though there are many and the tool of choice is open for use, for now we can focus on using vsCode as this is universal to also other programming languages but if you are interested in a polygot system you can test positron.

### Installations

***Let us check what installations you have***

- Python Installation
- IDE Installation
- To install all this together we prefer [anaconda](www.anaconda.com)
  - Anaconda | **full suit of packages and tools**
  - miniconda | **minimal and necessary packages**

:::


## Python | Hello World

Python being an interpreted high level programming language, making things easier for the programmer. Able to pick up the things very easily.

Let us start with the first code.

::: {.panel-tabset}

### Hello World

```{python}
#| echo: True

print("Hello WOrld")


```

Let us use it as a calculator.

```{python}
#| echo: true
#| eval: false
#| code-line-numbers: "|1|3|5|7"

2 + 2  #Add
#4
3 - 1  #Subtract
#2
4 * 5  #Multiply
#20
20 / 5 #Divide
#4 
5 ** 2 #Exponent
#25
5 % 2  #?What is the result

```


Using it as an ***input***

```{python}
#| echo: true
#| eval: false

input("What's your name")

```

Using ***comments***

```{python}
#| echo: true

#This is a comment

```

Assigning objects to names **variables**

```{python}
#| echo: true


department = "DT"

print(department)

# you can change the variable on the fly

department = 'Customs'

print(department)
```

Rules for variable names

* Can't start with numbers (1,2,3,4....)
* Letter, numbers, underscores are allowed in the name but ',-, spaces are not allowed


### Keywords

**python** has *keywords* this are words that have syntactical use in the program below list even though not fully conclusive.

`and`   `continue`    `except`    `global`    `lambda`    `raise`   `yield`

`as`    `def`   `exec`    `if`    `not`   `return`

`assert`    `del`   `finally`   `import`    `or`    `try`

`break`   `elif`    `for`   `in`    `pass`    `while`

`class`   `else`    `from`    `is`    `print`   `with`


### Data types

**Numbers**

Integers, floating point numbers and complex numbers falls under Python numbers category.

> We can use the `type()` function to know which class a variable or a value belongs to and the `isinstance()` function to check if an object belongs to a particular class.

```{python}
#| echo: true

a = 5
print(a, "is of type", type(a))

a = 2.0
print(a, "is of type", type(a))

a = 1+2j
print(a, "is of type", type(a))
print(a, "is complex number?", isinstance(1+2j,complex))

```


**Strings**

sequence of characters used to store and represent text-based information

```{python}
#| echo: true
first_string = "My first String"
first_string
```

```{python}
#| echo: true
#| eval: false
long_string = """Very long string
spanning multiple lines
that never seem to come to an end"""
long_string
```


***List***

Mutable ordered sequence of items.

```{python}
#| echo: true
first_list = [1,2,3,4,1,1,1,1]
first_list
```

List objects provide several methods

```{python}
#| echo: true
#| eval: false
first_list.count(1)
first_list.index(1)
first_list.append(5)
first_list.remove(5)
first_list.pop(-1)
first_list.reverse()
first_list.sort()
```



***Tuples***

Immutable ordered sequence of items.Tuples once created cannot be modified.

```{python}
#| echo: true
first_tuple = (1,2,3)
first_tuple
```



***Sets***

Ordered collections of unique items.

```{python}
#| echo: true
#| #| eval: false
{42, 3.14, 'hello'} # Literal for a set with three items
{100} # Literal for a set with one item
set() # Empty set (can't use {}â€”empty dict!)
```


***Dictionary***

Arbitrary collection of objects indexed by nearly arbitrary values called keys.

```{python}
#| echo: true
first_dic = {'a' : [1,2,3], 'b' : [4,5,6], 'c' : [7,6,8]}
first_dic
```

```{python}
#| echo: true
#| eval: false

{'x':42, 'y':3.14, 'z':7} # Dictionary with three items, str keys
{1:2, 3:4} # Dictionary with two items, int keys
{1:'za', 'br':23} # Dictionary with mixed key types
{} # Empty dictionary


dict(x=42, y=3.14, z=7) # Dictionary with three items, str keys
dict([(1, 2), (3, 4)]) # Dictionary with two items, int keys
dict([(1,'za'), ('br',23)]) # Dictionary with mixed key types
dict() # Empty dictionary
```


### Methods & Functions

**Methods**

Method: Attributes associated to different objects and data types. As well classes at a broader level

```{python}
#| echo: true
first_string.upper()
first_string.lower()
first_string.swapcase()
first_string.rsplit() #separating or delimiter is a space

```

***Functions***

```{python}
#| echo: true
first_list = [1,2,3,4]
first_list
```


### Summary Sheets

**associativity** of the operator: L (left-to-right), R (right-to-left), or NA (nonassociative).

|**Operator**|**Description**|**Associativity**|
|----|-----|------|
|`{key:expr,...}`   |Dictionary creation| NA|
|`{ expr ,...}`     |Set creation       | NA|
|`[ expr ,...]`     |List creation      | NA|
|`( expr ,...)`     |Tuple creation or just parentheses      | NA|
|`f ( expr ,...)`     |Function call      | L|
|`x [ index : index ]`     |Slicing      | L|
|`x [ index ]`     |Indexing      | L|
|`x . attr`     |Attribute reference      | L|
|`x ** y`     |Exponentiation (x to the yth power)      | R|
|`~ x`     |Bitwise NOT      | NA|
|`+x, -x`     |Unary plus and minus      | NA|
|`x*y, x/y, x//y, x%y`     |Multiplication, division, truncating division,remainder      | L|
|`x+y, x-y` | Addition, subtraction | L |
|`x<<y, x>>y` | Left-shift, right-shift | L |
|`x & y` | Bitwise AND | L |
|`x ^ y` | Bitwise XOR | L |
|`x | y` | Bitwise OR | L |
|`x<y, x<=y, x>y, x>=y, x<>y (v2 only),x!=y, x==y` | Comparisons (less than, less than or equal, greater than, greater than or equal, inequality, equality)a | NA |
|`x is y, x is not y` | Identity tests | NA |
|`x in y, x not in y` | Membership tests | NA |
|`not x` | Boolean NOT | NA | 
|`x and y` | Boolean AND | L | 
|`x or y` | Boolean OR | L | 
|`x if expr else y` | Ternary operator | NA |
|`lambda arg,...: expr` | Anonymous simple function | NA |

:::

## Python | Further into Hello World

::: {.panel-tabset}

### Iterations

Iterations is repeating and the most common form of iteration is `for` 
Code highligt for `for`

```{python}
#| echo: true
#| eval: false

for value in a_list:
  #do something
  
```



:::

## Python modules

## Modules introduction

When our program grows bigger, it is a good idea to break it into different modules.

A module is a file containing Python definitions and statements. Python modules have a filename and end with the extension .py.

Definitions inside a module can be imported to another module or the interactive interpreter in Python. We use the import keyword to do this.

For example, we can import the math module by typing in import math.

```{python}
#| echo: true

import math
print(math.pi)


```

Checking paths using **sys** module

```{python}
#| echo: true

import sys
print(sys.path)
```


## Python numpy | Introduction {.smaller}

***numpy***: python module/library specialized in *Arrays and Vectorized Computation*.

NumPy, short for Numerical Python, is one of the most important foundational packages for numerical computing in Python. Numpy works with array from 1-n dimensional.

```{python}

#| echo: true

import numpy as np

my_arr = np.arange(10)

#my_list = list(range(10)) #inbuilt python

my_arr
```

Multidimensional Array

```{python}
#| echo: true

data = np.array([[1.5, -0.1, 3], [0, -3, 6.5]])

data

```

Array descriptors

```{python}
#| echo: true

data.shape
data.dtype
data.ndim

```


## Python Pandas | Introduction

***Pandas*** : Python module/library enhancing data manipulation tools designed to make data cleaning and analysis fast and convenient in Python. Works intandem with *numpy* and is the core working under the hood.

```{python}
#| echo: true

import pandas as pd

obj_series = pd.Series([4, 7, -5, 3])

obj_series

```

Main difference of pandas with numpy is that it has indexed values and designed for working with tabular or heterogeneous data.


::: {.panel-tabset}

### Intro

Pandas relies on dataframes this is excel like data format with rows/records and columns/fields. Which mankes it easy to work with. 

Each row stands for an observation and columns here are variables.

```{python}
#| echo: true

data = {
  'county' : ['Nairobi','Kiambu','Kajiado','Machakos'],
  'headquarters' : ['Nairobi','Kiambu','Kajiado','Machakos'],
  'population' : [4397073,2417735,1117840,1421932]
}

df_data = pd.DataFrame(data,columns=['county','headquarters','population'])
df_data
```

Checking and investigating the dataframe

```{python}
#| echo: true
#| eval: false

df_data.shape()
df_data.index()
df_data.columns()
df_data.info()
df_data.count()

```

### Pandas Summary

```{python}
#| echo: true
#| eval: false

df_data.sum()
df_data.cumsum()
df_data.min()
df_data.max()
df_data.idmax()
df_data.idmin()
df_data.describe()
df_data.mean()
df_data.media()
```


### Pandas Import/Export [Read/Write]

**Read CSV**

```{python}
#| echo: true
#| eval: false

#import pandas as pd
df = pd.read_csv('file.csv', header = None, nrows=5)
df.to_csv("first_dataframe.csv")

```

**Read excel**

```{python}
#| echo: true
#| eval: false

df = pd.read_excel('excel_file.xlsx', sheet = 'Sheet1')

df_mulitple_excel = pd.ExcelFile('excel_file.xlsx')
df = pd.read_excel(df_mulitple_excel,  'Sheet1')


df.to_excel('first_dataframe.xlsx', sheet_name = 'Sheet first')
```


|Function|	Description
|-------|--------
|read_csv |	Load delimited data from a file, URL, or file-like object; use comma as default delimiter
|read_fwf |	Read data in fixed-width column format (i.e., no delimiters)
|read_clipboard|	Variation of `read_csv` that reads data from the clipboard; useful for converting tables from web pages
|read_excel|	Read tabular data from an Excel XLS or XLSX file
|read_hdf|	Read HDF5 files written by pandas
|read_html|	Read all tables found in the given HTML document
|read_json|	Read data from a JSON (JavaScript Object Notation) string representation, file, URL, or file-like object
|read_feather|	Read the Feather binary file format
|read_orc|	Read the Apache ORC binary file format
|read_parquet|	Read the Apache Parquet binary file format
|read_pickle|	Read an object stored by pandas using the Python pickle format
|read_sas|	Read a SAS dataset stored in one of the SAS system's custom storage formats
|read_spss|	Read a data file created by SPSS
|read_sql|	Read the results of a SQL query (using SQLAlchemy)
|read_sql_table|	Read a whole SQL table (using SQLAlchemy); equivalent to using a query that selects everything in that table using `read_sql`
|read_stata|	Read a dataset from Stata file format
|read_xml|	Read a table of data from an XML file


### Pandas Data Cleaning

> 80% of the work done on data is cleaning

#### Dealing with missing data

|Method |	Description
|------|---------
|dropna |	Filter axis labels based on whether values for each label have missing data, with varying thresholds for how much missing data to tolerate.
|fillna |	Fill in missing data with some value or using an interpolation method such as "ffill" or "bfill".
|isna |	Return Boolean values indicating which values are missing/NA.
|notna	| Negation of `isna`, returns True for non-NA values and False for NA values.


#### Data Transformation

***Removing Duplicates***

```{python}
#| echo: true
#| eval: false

data = pd.DataFrame({"k1": ["one", "two"] * 3 + ["two"],
                     "k2": [1, 1, 2, 3, 3, 4, 4]})
                     
data

data.duplicated()

data.drop_duplicates()

data["v1"] = range(7)

data

data.drop_duplicates(subset=["k1"])

data.drop_duplicates(["k1", "k2"], keep="last")

```


:::

## Visualization

The point of visualization is being able to summary data to palatable chunks, easy to read and digest. Quick glances and be able to tell a story.

Humans are visual, absorbing more through image than any other thing. There are very many examples of visuals that have impacted the world I will talk about 3.


1. **The general** [minrad maps](https://bigthink.com/wp-content/uploads/2010/07/18578322.png?fit=1200,675)
2. **The nurse** [crimea wars](https://upload.wikimedia.org/wikipedia/commons/1/17/Nightingale-mortality.jpg)
3. **The Doctor** [cholera maps](https://www.esri.com/arcgis-blog/wp-content/uploads/2023/12/JohnSnowCholeraMap_Detail.png)



Any visual should be able to tell a story either for record purposes and future solutions, predictions.

## {fullscreen=true}

<iframe class="stretch" data-src="https://www.gapminder.org/tools/#$chart-type=bubbles&url=v1"></iframe>



## Python Visualization | Matplotlip & Seaborn

::: {.panel-tabset}

### Matplotlip

Matplotlib is the "grandfather" library of data visualization with Python. It was created by John Hunter. He created it to try to replicate MatLab's (another programming language) plotting capabilities in Python. So if you happen to be familiar with matlab, matplotlib will feel natural to you.

It is an excellent 2D and 3D graphics library for generating scientific figures. 

Some of the major Pros of Matplotlib are:

* Generally easy to get started for simple plots
* Support for custom labels and texts
* Great control of every element in a figure
* High-quality output in many formats
* Very customizable in general

Matplotlib allows you to create reproducible figures programmatically. Let's learn how to use it! Before continuing this lecture, I encourage you just to explore the official Matplotlib web page: [http://matplotlib.org/](http://matplotlib.org/)


```{python}
#| echo: true
#| eval: true
import matplotlib.pyplot as plt
```

```{python}
#| echo: true
import numpy as np
x = np.linspace(0, 5, 11)
y = x ** 2
```

Since we are using ipython notebook we need to run `%matplotlib inline` before running the plot

```{python}
#| echo: true
plt.plot(x, y, 'r') # 'r' is the color red
plt.xlabel('X Axis Title Here')
plt.ylabel('Y Axis Title Here')
plt.title('String Title Here')
plt.show()
```

**Bar charts**


```{python}
#| echo: true
x = [10, 20, 30, 40, 50, 60]
y = [13, 45, 23, 34, 96, 76]
plt.title('Bar Graph')
plt.bar(x, y, color='dodgerblue', width=5)
plt.show()
```


**Pie charts**

```{python}
#| echo: true
x = [35, 20, 30, 40, 50, 30]
y = ['Apple', 'Bananna', 'Grapes', 'Orange', 'PineApple', 'Dragon Fruit']
plt.title('Pie Chart')
plt.pie(x, labels=y)
plt.show()

```



### Seaborn

Seaborn module for visualization

**Line Graph**

```{python}

#| echo: true

# importing packages
import seaborn as sns
# loading dataset
data = sns.load_dataset("iris")
# draw lineplot
sns.lineplot(x="sepal_length", y="sepal_width", data=data)

```


**Scatter Graph**

```{python}
#| echo: true

data = sns.load_dataset("iris")
sns.scatterplot(data=data)
```



:::


## Folder Structure & File Management {visibility="hidden"}



# SQL {visibility="hidden"}

## SQL Introduction  {.smaller} {visibility="hidden"}